{"version":3,"file":"static/js/246.1b8d3614.chunk.js","mappings":"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","sources":["components/Form/Form.jsx","components/common/Button/Button.jsx","components/common/PopUp/PopUp.jsx","hooks/requests.js","hooks/useModals.js","hooks/useTasks.js","routes/UpdateTask/UpdateTask.jsx"],"sourcesContent":["import React from \"react\";\r\nimport \"./form.scss\";\r\nimport Button from \"../common/Button/Button\";\r\nimport moment from \"moment\";\r\n\r\nconst Form = ({ mode, createTask, updateTask, task, className }) => {\r\n  if (mode === \"create\") {\r\n    return (\r\n      <div className={`${className} form`}>\r\n        <form className=\"form-container\" method=\"post\" onSubmit={createTask}>\r\n          <h1 className=\"form-title\">New Task</h1>\r\n          <div className=\"form-fields\">\r\n            <div className=\"form-field\">\r\n              <label htmlFor=\"task\">Task</label>\r\n              <input type=\"text\" name=\"task\" id=\"task\" required />\r\n            </div>\r\n            <div className=\"form-field\">\r\n              <label htmlFor=\"description\">Desc</label>\r\n              <textarea name=\"description\" id=\"description\" />\r\n            </div>\r\n            <div className=\"form-field\">\r\n              <label htmlFor=\"due-date\">Due Date</label>\r\n              <input\r\n                type=\"datetime-local\"\r\n                name=\"due-date\"\r\n                id=\"due-date\"\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-field\">\r\n              <label htmlFor=\"priority\">Priority</label>\r\n              <select\r\n                id=\"priority\"\r\n                defaultValue={\"high\"}\r\n                name=\"priority\"\r\n                required\r\n              >\r\n                <option value=\"high\">High</option>\r\n                <option value=\"medium\">Medium</option>\r\n                <option value=\"low\">Low</option>\r\n              </select>\r\n            </div>\r\n            <Button variant=\"primary\" type=\"submit\" height=\"30px\">\r\n              Create Task\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  } else if (mode === \"update\" && Object.keys(task).length > 0) {\r\n    return (\r\n      <div className={`${className} form`}>\r\n        <form className=\"form-container\" method=\"post\" onSubmit={updateTask}>\r\n          <h1 className=\"form-title\">Update Task</h1>\r\n          <div className=\"form-fields\">\r\n            <div className=\"form-field\">\r\n              <label>Task ID</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"taskid\"\r\n                defaultValue={task._id}\r\n                disabled\r\n              />\r\n            </div>\r\n            <div className=\"form-field\">\r\n              <label htmlFor=\"task\">Task</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"task\"\r\n                id=\"task\"\r\n                defaultValue={task.task}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-field\">\r\n              <label htmlFor=\"description\">Desc</label>\r\n              <textarea\r\n                name=\"description\"\r\n                id=\"description\"\r\n                defaultValue={task.desc}\r\n              />\r\n            </div>\r\n            <div className=\"form-field\">\r\n              <label htmlFor=\"due-date\">Due Date</label>\r\n              <input\r\n                type=\"datetime-local\"\r\n                name=\"due-date\"\r\n                id=\"due-date\"\r\n                // defaultValue=\"2018-06-12T19:30\"\r\n                defaultValue={moment(task.dueDate).format(\"yyyy-MM-DDTHH:mm\")}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-field\">\r\n              <label htmlFor=\"priority\">Priority</label>\r\n              <select\r\n                id=\"priority\"\r\n                defaultValue={task.priority}\r\n                name=\"priority\"\r\n                required\r\n              >\r\n                <option value=\"high\">High</option>\r\n                <option value=\"medium\">Medium</option>\r\n                <option value=\"low\">Low</option>\r\n              </select>\r\n            </div>\r\n            <Button variant=\"primary\" type=\"submit\" height=\"30px\">\r\n              Update Task\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./button.scss\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst Button = ({ variant, type, height, width, children, func, link}) => {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <button\r\n      type={type || \"button\"}\r\n      className={`button button-${variant}`}\r\n      style={{ height: height, width: width || \"100%\" }}\r\n      onClick={link? ()=>navigate(link) : func}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Popup from \"reactjs-popup\";\r\nimport \"./popup.scss\";\r\n\r\nconst PopUp = ({open, close, children, image}) => {\r\n\r\n  return (\r\n    <Popup open={open} closeOnDocumentClick onClose={close}>\r\n      {/* {console.log(open)} */}\r\n      <div className=\"modal\">\r\n        <a className=\"close\" onClick={close}>\r\n          &times;\r\n        </a>\r\n        <div className=\"popup-container\" >\r\n          <div className=\"popup-image-container\">\r\n            <img src={image} className=\"popup-image\"/>\r\n          </div>\r\n          <div className=\"popup-caption\">{children}</div>\r\n        </div>\r\n      </div>\r\n    </Popup>\r\n  );\r\n};\r\n\r\nexport default PopUp;","import axios from \"axios\";\r\n// require(\"dotenv\").config();\r\n// const API_URL = \"https://taskr-tasktracker.herokuapp.com/api/v1\" || \"http://localhost:5000/api/v1\";\r\nconst API_URL = \"https://taskr-tasktracker.herokuapp.com/api/v1\";\r\n\r\nconst httpGetTasks = async () => {\r\n  return await axios.get(`${API_URL}/tasks`);\r\n};\r\n\r\nconst httpGetArchivedTasks = async () => {\r\n  return await axios.get(`${API_URL}/tasks/archived`);\r\n};\r\n\r\nconst httpClearArchivedTasks = async () => {\r\n  return await axios.delete(`${API_URL}/tasks/archived`);\r\n}\r\n\r\nconst httpRestoreTask = async(taskId) => {\r\n  return await axios.patch(`${API_URL}/tasks/archived/${taskId}`);\r\n}\r\n\r\nconst httpCreateTask = async (task) => {\r\n  return await axios.post(`${API_URL}/tasks`, task);\r\n};\r\n\r\nconst httpDeleteTask = async (taskID) => {\r\n  return await axios.delete(`${API_URL}/tasks/archived/${taskID}`);\r\n};\r\n\r\nconst httpGetTask = async (taskID) => {\r\n  return await axios.get(`${API_URL}/tasks/${taskID}`);\r\n};\r\n\r\nconst httpUpdateTask = async (taskID, updatedTask) => {\r\n  return await axios.patch(`${API_URL}/tasks/${taskID}`, updatedTask);\r\n};\r\n\r\nconst httpGoogleLogin = async() => {\r\n  return await axios.get(`http://localhost:5000/auth/google`);\r\n}\r\n\r\nexport {\r\n  httpGetTasks,\r\n  httpCreateTask,\r\n  httpDeleteTask,\r\n  httpUpdateTask,\r\n  httpGetTask,\r\n  httpGetArchivedTasks,\r\n  httpClearArchivedTasks,\r\n  httpRestoreTask,\r\n  httpGoogleLogin,\r\n};\r\n","import {useState} from 'react'\r\n\r\nconst useModals = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [content, setContent] = useState({image: \"\", message: \"\"});\r\n\r\n  const closeModal = () => {\r\n    setIsOpen(false);\r\n  }\r\n\r\n  const modalContent = (image, message) => {\r\n    setIsOpen(true);\r\n    setContent({image, message});\r\n  }\r\n\r\n  return {\r\n    closeModal, isOpen, modalContent, content\r\n  }\r\n}\r\n\r\nexport default useModals","import { useEffect, useState, useCallback } from \"react\";\r\nimport {\r\n  httpGetTasks,\r\n  httpCreateTask,\r\n  httpDeleteTask,\r\n  httpUpdateTask,\r\n  httpGetTask,\r\n  httpGetArchivedTasks,\r\n  httpClearArchivedTasks,\r\n  httpRestoreTask,\r\n  httpGoogleLogin,\r\n} from \"./requests\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\n\r\nconst useTasks = ({modalContent}) => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [tasks, setTasks] = useState([]);\r\n  const [archivedTasks, setArchivedTasks] = useState([]);\r\n  const [task, setTask] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const id = searchParams.get(\"id\");\r\n\r\n  // GET tasks\r\n  const getTasks = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const resp = await httpGetTasks();\r\n      setTasks(\r\n        resp.data.sort((a, b) => {\r\n          return (\r\n            Number(new Date(b.dateCreated).getTime()) -\r\n            Number(new Date(a.dateCreated).getTime())\r\n          );\r\n        })\r\n      );\r\n      setIsLoading(false);\r\n    } catch (err) {\r\n      modalContent(\"/assets/man-stress.png\", err.response.data.error);\r\n    }\r\n  }, []);\r\n\r\n  // GET archived tasks\r\n  const getArchivedTasks = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const resp = await httpGetArchivedTasks();\r\n      setArchivedTasks(\r\n        resp.data.sort((a, b) => {\r\n          return (\r\n            Number(new Date(b.dateCreated).getTime()) -\r\n            Number(new Date(a.dateCreated).getTime())\r\n          );\r\n        })\r\n      );\r\n      setIsLoading(false);\r\n    } catch (err) {\r\n      modalContent(\"/assets/man-stress.png\", err.response.data.error);\r\n    }\r\n  }, []);\r\n\r\n  // DELETE archived tasks\r\n  const clearArchivedTasks = useCallback(async() => {\r\n    try {\r\n      const resp = await httpClearArchivedTasks();\r\n      getArchivedTasks();\r\n      modalContent(\"/assets/man-success.png\", resp.data.msg);\r\n    } catch (err) {\r\n      modalContent(\"/assets/man-stress.png\", err.response.data.error);\r\n    }\r\n  }, [modalContent, getArchivedTasks]);\r\n\r\n  const restoreArchivedTask = useCallback(async(taskId) => {\r\n    try {\r\n      const resp = await httpRestoreTask(taskId);\r\n      getArchivedTasks();\r\n      modalContent(\"/assets/man-success.png\", resp.data.msg);\r\n    } catch (err) {\r\n      modalContent(\"/assets/man-stress.png\", err.response.data.error);\r\n    }\r\n  }, [modalContent, getArchivedTasks]);\r\n\r\n  // GET task\r\n  const getTask = useCallback(async (taskId) => {\r\n    if (taskId !== null) {\r\n      try {\r\n        const resp = await httpGetTask(taskId);\r\n        setTask(resp.data);\r\n      } catch (err) {\r\n        modalContent(\"/assets/man-stress.png\", err.response.data.error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // DELETE task\r\n  const deleteTask = useCallback(\r\n    async (taskId) => {\r\n      try {\r\n        const resp = await httpDeleteTask(taskId);\r\n        await getArchivedTasks();\r\n        modalContent(\"/assets/man-success.jpg\", resp.data.msg);\r\n      } catch (err) {\r\n        modalContent(\"/assets/man-stress.png\", err.response.data.error);\r\n      }\r\n    },\r\n    [getTasks, modalContent]\r\n  );\r\n\r\n  // POST task\r\n  const createTask = useCallback(\r\n    async (e) => {\r\n      e.preventDefault();\r\n      // * task, desc, dll namanya harus sama dengan schema db\r\n      const data = new FormData(e.target);\r\n      const task = data.get(\"task\");\r\n      const desc = data.get(\"description\");\r\n      const dueDate = new Date(data.get(\"due-date\"));\r\n      const priority = data.get(\"priority\");\r\n      const dateCreated = new Date().toLocaleString();\r\n\r\n      const dataObj = { task, desc, dueDate, priority, dateCreated };\r\n\r\n      try {\r\n        const resp = await httpCreateTask(dataObj);\r\n        await getTasks();\r\n        modalContent(\"/assets/man-success.jpg\", resp.data.msg);\r\n        e.target.reset();\r\n      } catch (err) {\r\n        modalContent(\"/assets/man-stress.png\", err.response.data.error);\r\n      }\r\n    },\r\n    [getTasks, modalContent]\r\n  );\r\n\r\n  // PATCH task\r\n  const updateTask = useCallback(\r\n    async (e) => {\r\n      e.preventDefault();\r\n      // * task, desc, dll namanya harus sama dengan schema db\r\n      const data = new FormData(e.target);\r\n      const task = data.get(\"task\");\r\n      const desc = data.get(\"description\");\r\n      const dueDate = new Date(data.get(\"due-date\"));\r\n      const priority = data.get(\"priority\");\r\n      const dateCreated = new Date().toLocaleString();\r\n\r\n      const updatedTask = { task, desc, dueDate, priority, dateCreated };\r\n\r\n      try {\r\n        const resp = await httpUpdateTask(id, updatedTask);\r\n        modalContent(\"/assets/man-success.jpg\", resp.data.msg);\r\n      } catch (err) {\r\n        modalContent(\"/assets/man-stress.png\", err.response.data.error);\r\n      }\r\n    },\r\n    [modalContent, id]\r\n  );\r\n\r\n  const archiveTask = useCallback(\r\n    async (taskId) => {\r\n      const dateArchived = new Date();\r\n      try {\r\n        const resp = await httpUpdateTask(taskId, { dateArchived });\r\n        await getTasks();\r\n        modalContent(\"/assets/man-success.jpg\", resp.data.msg);\r\n      } catch (err) {\r\n        modalContent(\"/assets/man-stress.png\", err.response.data.error);\r\n      }\r\n    },\r\n    [modalContent, getTasks]\r\n  );\r\n\r\n  useEffect(() => {\r\n    getTasks();\r\n    getArchivedTasks();\r\n  }, [getTasks, getArchivedTasks]);\r\n\r\n  useEffect(() => {\r\n    getTask(id);\r\n  }, [getTask, id]);\r\n\r\n  return {\r\n    createTask,\r\n    updateTask,\r\n    deleteTask,\r\n    archiveTask,\r\n    tasks,\r\n    task,\r\n    archivedTasks,\r\n    clearArchivedTasks,\r\n    restoreArchivedTask,\r\n    isLoading\r\n  };\r\n};\r\n\r\nexport default useTasks;\r\n","import React from \"react\";\r\nimport \"./updatetask.scss\";\r\nimport Form from \"../../components/Form/Form\";\r\nimport useTasks from \"../../hooks/useTasks\";\r\nimport { IoChevronBackCircleSharp } from \"react-icons/io5\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport PopUp from \"../../components/common/PopUp/PopUp\";\r\nimport useModals from \"../../hooks/useModals\";\r\n\r\nconst UpdateTask = () => {\r\n  const { isOpen, closeModal, modalContent, content } = useModals();\r\n  const { task, updateTask} = useTasks({modalContent});\r\n  const navigate = useNavigate();\r\n  \r\n  return (\r\n    <section className=\"updatetask-section\">\r\n      <div className=\"updatetask-container\">\r\n        <div className=\"updatetask-back-container\" onClick={() => navigate(-1)}>\r\n          <IoChevronBackCircleSharp className=\"updatetask-back-icon\" />\r\n          <span>Back</span>\r\n        </div>\r\n\r\n        <Form mode=\"update\" task={task} updateTask={updateTask} className=\"updatetask-form\"/>\r\n\r\n        <PopUp open={isOpen} close={closeModal} image={content.image}>\r\n          {content.message}\r\n        </PopUp>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default UpdateTask;\r\n"],"names":["mode","createTask","updateTask","task","className","method","onSubmit","htmlFor","type","name","id","required","defaultValue","value","Button","variant","height","Object","keys","length","_id","disabled","desc","moment","dueDate","format","priority","width","children","func","link","navigate","useNavigate","style","onClick","open","close","image","closeOnDocumentClick","onClose","src","API_URL","httpGetTasks","axios","httpGetArchivedTasks","httpClearArchivedTasks","httpRestoreTask","taskId","httpCreateTask","httpDeleteTask","taskID","httpGetTask","httpUpdateTask","updatedTask","useState","isOpen","setIsOpen","message","content","setContent","closeModal","modalContent","useSearchParams","searchParams","tasks","setTasks","archivedTasks","setArchivedTasks","setTask","isLoading","setIsLoading","get","getTasks","useCallback","resp","data","sort","a","b","Number","Date","dateCreated","getTime","response","error","getArchivedTasks","clearArchivedTasks","msg","restoreArchivedTask","getTask","deleteTask","e","preventDefault","FormData","target","toLocaleString","dataObj","reset","archiveTask","dateArchived","useEffect","useModals","useTasks","Form","PopUp"],"sourceRoot":""}